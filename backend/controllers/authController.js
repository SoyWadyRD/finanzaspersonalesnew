const Usuario = require("../models/usuario");
const generarToken = require("../utils/generarToken");
const crypto = require("crypto");
const jwt = require("jsonwebtoken");
const enviarCorreo = require("../utils/enviarCorreo");
const path = require("path");


  // Registro de usuario con env√≠o de correo

// Registro de usuario con env√≠o de correo
exports.registro = async (req, res) => {
  const { nombre, correo, contrase√±a } = req.body;

  try {
    // Verificar si el usuario ya existe
    const usuarioExistente = await Usuario.findOne({ correo });
    if (usuarioExistente) return res.status(400).json({ mensaje: "El usuario ya existe" });

    // Crear el nuevo usuario
    const usuario = await Usuario.create({ nombre, correo, contrase√±a });

    // Generar token de verificaci√≥n
    const tokenVerificacion = jwt.sign(
      { id: usuario._id },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    // Enviar correo de verificaci√≥n
    const link = `${process.env.FRONTEND_URL}/api/auth/verificar/${tokenVerificacion}`;
    const html = `<h2>Hola ${nombre}</h2>
                  <p>Para activar tu cuenta haz clic en el link:</p>
                  <a href="${link}">Verificar cuenta</a>`;

    // Enviar el correo de verificaci√≥n
    try {
      await enviarCorreo(correo, "Verifica tu cuenta", html);  // Llamamos a la funci√≥n sin 'res' aqu√≠
      console.log(`üìß Nuevo usuario registrado: ${nombre} üéâ. Correo de verificaci√≥n enviado. ‚úâÔ∏è`);
      res.status(201).json({
        mensaje: "Usuario registrado. Revisa tu correo para verificar la cuenta."
      });
    } catch (error) {
      console.error("‚ùå Error al enviar el correo:", error.message);
      res.status(500).json({ mensaje: "Error al enviar el correo de verificaci√≥n", error: error.message });
    }

  } catch (error) {
    console.error("‚ùå Error en el registro:", error.message);
    res.status(500).json({ mensaje: "Error en el registro", error: error.message });
  }
};










// Verificaci√≥n de correo
exports.verificarCorreo = async (req, res) => {
  const { token } = req.params;
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const usuario = await Usuario.findById(decoded.id);
    if (!usuario) {
      return res.sendFile(path.join(__dirname, "../../frontend/confirmaciones/verificacion-error.html"));
    }
    if (usuario.verificado) {
      return res.sendFile(path.join(__dirname, "../../frontend/confirmaciones/ya-verificado.html"));
    }

    usuario.verificado = true;
    await usuario.save();

    res.sendFile(path.join(__dirname, "../../frontend/confirmaciones/verificacion-exitosa.html"));
  } catch (error) {
    res.sendFile(path.join(__dirname, "../../frontend/confirmaciones/verificacion-error.html"));
  }
};







// Login (solo usuarios verificados)
exports.login = async (req, res) => {
  const { correo, contrase√±a } = req.body;

  try {
    const usuario = await Usuario.findOne({ correo });
    if (!usuario) return res.status(400).json({ mensaje: "Correo o contrase√±a inv√°lidos" });
    if (!usuario.verificado) return res.status(400).json({ mensaje: "Cuenta no verificada" });

    const esCorrecta = await usuario.compararContrase√±a(contrase√±a);
    if (!esCorrecta) return res.status(400).json({ mensaje: "Correo o contrase√±a inv√°lidos" });

    // Consola con mensaje y emoji
    console.log(`üîë ${usuario.nombre} ha iniciado sesi√≥n correctamente. ‚úÖ`);

    res.json({
      _id: usuario._id,
      nombre: usuario.nombre,
      correo: usuario.correo,
      token: generarToken(usuario._id)
    });
  } catch (error) {
    console.error("‚ùå Error en el login:", error.message);
    res.status(500).json({ mensaje: "Error en el login", error: error.message });
  }
};

// Perfil protegido
exports.perfil = async (req, res) => {
  const usuario = await Usuario.findById(req.usuarioId).select("-contrase√±a");
  if (!usuario) return res.status(404).json({ mensaje: "Usuario no encontrado" });
  res.json(usuario);
};




















// Recuperaci√≥n de contrase√±a
exports.recuperarContrase√±a = async (req, res) => {
  const { correo } = req.body;
  try {
    const usuario = await Usuario.findOne({ correo });
    if (!usuario) return res.status(400).json({ mensaje: "Usuario no encontrado." });

    const token = crypto.randomBytes(20).toString("hex");
    usuario.resetPasswordToken = token;
    usuario.resetPasswordExpires = Date.now() + 3600000; // 1 hora
    await usuario.save();

    const link = `${process.env.FRONTEND_URL}/reset-password/${token}`;
    const html = `
      <h2>Hola ${usuario.nombre}</h2>
      <p>Para restablecer tu contrase√±a, haz clic en el siguiente enlace:</p>
      <a href="${link}">Restablecer contrase√±a</a>
      <p>Este enlace expirar√° en 1 hora.</p>
    `;
    
    await enviarCorreo(correo, "Recuperaci√≥n de Contrase√±a", html);
    res.status(200).json({ mensaje: "Te hemos enviado un enlace para restablecer tu contrase√±a." });
  } catch (err) {
    res.status(500).json({ mensaje: "Error al recuperar la contrase√±a.", error: err.message });
  }
};





// Restablecimiento de contrase√±a
exports.restablecerContrase√±a = async (req, res) => {
  const { token } = req.params;
  const { contrase√±a } = req.body;

  try {
    const usuario = await Usuario.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() } // Verificar que el token no haya expirado
    });

    if (!usuario) {
      console.log("‚ö†Ô∏è Token inv√°lido o expirado para el usuario:", usuario.nombre);  // Si el token no es v√°lido, imprimir en consola
      return res.status(400).json({ mensaje: "Token inv√°lido o expirado." });
    }

    usuario.contrase√±a = contrase√±a;
    usuario.resetPasswordToken = undefined;
    usuario.resetPasswordExpires = undefined;

    await usuario.save();

    // Consola con mensaje y emoji
    console.log(`üîê Contrase√±a cambiada con √©xito para ${usuario.nombre}. üîÑ`);

    res.status(200).json({ mensaje: "Tu contrase√±a ha sido restablecida con √©xito." });
  } catch (err) {
    console.error("‚ùå Error al restablecer la contrase√±a:", err.message);  // Log del error
    res.status(500).json({ mensaje: "Error al restablecer la contrase√±a.", error: err.message });
  }
};

